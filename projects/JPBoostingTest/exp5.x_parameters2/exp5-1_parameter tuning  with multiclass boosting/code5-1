# [Cell1] Imports
import pandas as pd
import numpy as np
from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score
from xgboost import XGBClassifier

# Upload dataset
uploaded = files.upload()
df = pd.read_csv(list(uploaded.keys())[0])

# Features and target
X = df.drop(columns=["vulnerability_class"])
y = df["vulnerability_class"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

print("Train:", X_train.shape, " Test:", X_test.shape)
print("Class distribution:", y.value_counts(normalize=True))

# [Cell2] Rule-based parameter candidates
param_grid = [
    {"max_depth": 2, "n_estimators": 300, "learning_rate": 0.1},
    {"max_depth": 1, "n_estimators": 500, "learning_rate": 0.1},
    {"max_depth": 1, "n_estimators": 300, "learning_rate": 0.15},
    {"max_depth": 2, "n_estimators": 200, "learning_rate": 0.1},
    {"max_depth": 1, "n_estimators": 300, "learning_rate": 0.12},
    {"max_depth": 1, "n_estimators": 300, "learning_rate": 0.1},
    {"max_depth": 1, "n_estimators": 200, "learning_rate": 0.15},
    {"max_depth": 1, "n_estimators": 200, "learning_rate": 0.12},
    {"max_depth": 1, "n_estimators": 200, "learning_rate": 0.1},
]

results = []

for params in param_grid:
    model = XGBClassifier(
        objective="multi:softprob",
        num_class=5,
        subsample=0.8,
        colsample_bytree=0.8,
        random_state=42,
        eval_metric="mlogloss",
        **params
    )
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)

    acc = (y_pred == y_test).mean()
    auc = roc_auc_score(y_test, y_proba, multi_class="ovr", average="macro")

    results.append((params["max_depth"], params["n_estimators"], params["learning_rate"], acc, auc))

# Sort by AUC
results_sorted = sorted(results, key=lambda x: x[4], reverse=True)

print("=== Rule-based candidates (sorted by AUC) ===")
for md, ne, lr, acc, auc in results_sorted:
    print(f"md={md}, ne={ne}, lr={lr}  ->  Acc={acc:.3f}, AUC={auc:.3f}")
