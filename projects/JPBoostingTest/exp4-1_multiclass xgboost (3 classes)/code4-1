# [Cell1] --- Imports
from google.colab import files
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

# [Cell2] --- Upload and load CSV
uploaded = files.upload()
df = pd.read_csv("household_vulnerability_japan_multiclass_noise.csv")

print("Shape:", df.shape)
print(df.head())

# [Cell3] --- Split X and y
X = df.drop(columns=["vulnerability_class"])
y = df["vulnerability_class"]

# Encode categorical features
cat_cols = X.select_dtypes(include="object").columns
for col in cat_cols:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])

# Stratified split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)
print("Train:", X_train.shape, " Test:", X_test.shape)
print("Class distribution in train:\n", y_train.value_counts(normalize=True))

# [Cell4] --- Train XGBoost multiclass model
model_multi = XGBClassifier(
    objective="multi:softprob",
    num_class=3,
    n_estimators=100,
    learning_rate=0.1,
    max_depth=1,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42,
    eval_metric="mlogloss"
)

model_multi.fit(X_train, y_train)

# [Cell5] --- Predictions & Evaluation
y_pred = model_multi.predict(X_test)
y_proba = model_multi.predict_proba(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

auc_macro = roc_auc_score(y_test, y_proba, multi_class="ovr", average="macro")
print("ROC AUC (macro OVR):", auc_macro)
